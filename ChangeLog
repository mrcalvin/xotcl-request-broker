2007-09-06  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/xorb-callback-procs.tcl: Added uninstall logic for 
	anythings of protocol plug-ins! 
	As for upgrades from 0.3 to 0.4, there is currently one
	limitation: contracts and 
	implementations that were defined by non-explicitly named
	::xotcl::Objects (by using new) cannot be identified through
	the allinstances used for upgrades (from within the scope of the
	upgrading connection thread as they were never initiated in
	this very very thread!). This must then be handled manually,
	this won't be a problem in 0.4+ thanks to the object types. 

	* tcl/15-xorb-aux-procs.tcl: Some hacking for a non-errorprone
          installation while using ::xo::db::sql::*

2007-09-05  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/15-xorb-aux-procs.tcl: Added new ::xo::db::require
          function_args call for acs-service-contract packages <
          5.4.0d1

	* Tested for the new ::xo::db::require package
          as introduced by xotcl-core 0.70

2007-09-04  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* Pitched requirement to xotcl-core 0.70. The update for
          acs-service-contract < 5.4.0d1 can't be handled by the
          install/ upgrade scripts, therefore it becomes an explicit
          requirement for the current install procedure to execture
          acs-service-contract-function-args.sql on the target db
          before proceeding with the installation.
	
	* tcl/15-xorb-aux-procs.tcl: First adjustment to xotcl-core
          0.70

2007-08-31  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/xorb-callback-procs.tcl: The install routine was missing
          the sourcing of the acs_function_args patches to
          acs-service-contract < 5.4.0d1.  
	  In addition, we need to call ::xo::db::DbPackage again, as
          xorb requires upon first-time sourcing some db stubs in
          place. This should be handled more nicely, by an update call
          to DbPackage in xotcl-core, for instance.

	* Pitched dependencies to xotcl-core 0.57, expecting the
          needed package-require patch being incorporated in the HEAD
          version.

	* tcl/15-xorb-aux-procs.tcl: Adjusted to recent xotcl-core
          versions that shifted DbPackage to the ::xo::db namespace
          instead of ::xo::db::sql; its instances are still placed in
          the old namespace.

2007-08-30  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* Added first release version of manual, both in the
          authoritive pdf and xhtml version. A Makefile (and tex4ht
          config) are provided as well to generate either or both
          target formats upon request.

	* tcl/20-xorb-procs.tcl: "Method slot" support is now more
          narrowly scoped: It is limited to slot calls on
          ServiceImplementation objects. This prevents a faulty
          streaming in new thread environments, i.e. object variables
          not being set as "set" calls are not allowed due to the
          revised configure etc.

2007-08-27  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* www/admin/regression-test.tcl: The regression test now runs
          smoothly and counts 149 test cases. 

	* tcl/xosc-procs.tcl: We now provide a first (not yet
          complete) proxy implementation for acs service contracts. We
          merged all facilities in this one library file for
          convenience and clarity. It is basically capable of
          declaring static client proxies, a dynamic form (as with
          acs_sc::invoke or acs::sc::call) will follow in a more
          general solution, along with dynamic client proxies in an
          upcoming version.

	* tcl/xorb-stub-procs.tcl: Shifted some attribute slots to
          the base class ContextObject: marshalledRequest,
          marshalledResponse, unmarshalledRequest,
          unmarshalledResponse; assuming that they will be required
          (in one or the other way) by protocol plug-ins. Some fixing
          to exception handling.

	* tcl/xorb-package-procs.tcl: acquireInvocationContext is now
          supported at the base class level (ProtocolPackage).

	* tcl/xorb-datatypes-procs.tcl: Changed remaining entries from
          ::xorb::protocols::Tcl to ::xorb::AcsSc. Extended support
          for ::xorb::datatypes::Object (still tentative and not
          entirely complete, but operative; added unwrap etc.).

	* tcl/xorb-context-procs.tcl: Shifted some attribute slots to
          the base class InvocationContext: marshalledRequest,
          marshalledResponse, unmarshalledRequest,
          unmarshalledResponse; assuming that they will be required
          (in one or the other way) by protocol plug-ins.

	* tcl/xorb-broker-procs.tcl: Implementations are now (more
          accurately) resolvable in dependence of their implementing/
          ruling contract. This required major changes to the overall
          broker implementation, especially Repository->resolve.

	* tcl/20-xorb-procs.tcl: Major changes to the xorb manager
          interface and interaction. Implementations are now treated
          more accurately in terms of their unambiguity as given by
          the implemented contract. Committed a bug fix to the
          recreation logic (Recreate) which resolved multiple
          contracts when re-checking existing bindings. Amended the
          return value checker to support ::xorb::datatypes::Object
          for multi-item return values (and multiples) as required by
          ACS service contracts.

	* tcl/10-xorb-exceptions-procs.tcl: Fixed some typos in
          documentation strings and re-adjusted the way, errorInfo
          information is appended to exception messages in debug
          mode. We are still not completely satisified with the
          latter, but for the time being, it should be fine (and
          verbose enough).

2007-08-26  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/10-xorb-exceptions-procs.tcl: We bound the verbosity
          level of exception messages to the server run level
          (production vs. debug, see aolserver parameter
          "debug"). Whenever we are in run level "debug", we get more
          verbose exception messages. Removed old in-place calls to
          global errorInfo.

	* tcl/00-xoexception/01-throwable-procs.tcl: change parameter
          trace of Throwable to stack, as this would otherwise be
          conflicting to ::xotcl::Object->trace.

2007-08-25  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/xorb-context-procs.tcl: Cleared for legacy code,
          i.e. ContextClass.

	* tcl/xorb-stub-procs.tcl: Disable asynchrony support for the
          release candidate and till the moment, the general
          infrastructure (thread extension) is stabilised.

2007-08-19  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* Changed the package parameter "per_instance_policy" to
          "invocation_access_policy". 

	* www/admin/regression-test.tcl: Adjusted test cases related
          to policies etc. 

	* tcl/xorb-package-procs.tcl: Invocation access policies are
          now integrated with protocol packages. Besides, protocol
          packages can initialize a xorb package object at any
          time, in order to use parameters of the request broker in
          their own realm, for instance.

	* tcl/xorb-deployment-procs.tcl: The invocation context is now
          available to the policy subject during evaluation (as object
          variable). It can be used from within conditions, privilege
          etc. definitions.

	* tcl/20-xorb-procs.tcl: The enforcement of invocation access
          policies (check_permissions) moved from the skeleton to the
          invoker, which yields much more flexibility (especially when
          needing the invocation context to be passed further
          down). Conception-wise, this is more straight anyway. 

2007-08-15  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* Amended the manual: Added a section on data type
          infrastructure (type codes, anythings, type sponsors), an
          introductory section on the idea of call abstractions, a
          first revision of early sections. 

	* tcl/20-xorb-procs.tcl: Changed a couple of switch-type
          checkoptions to ordinary non-pos args due to a bug in a
          release candidate version of xotcl 1.5.4. It is resolved by
          now, remaining uses of "switch" should be fine.

2007-08-08  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* www/doc/manual/src/manual.tex: Added some more infos on
          service implementations (per-object), compiled section on
          data types supported, revised quickstart section and minor
          fixes.  

	* www/admin/index.tcl: State icons now visually identify
          xorb-based implementations.

	* tcl/10-xorb-exceptions-procs.tcl: Fixed a minor issue with
          exceptions in general. some of them contained characters
          such as squared brackets etc. yielding some xml compat
          problems. just removed those in general. when revising the
          logging scheme, we may switch to pcdata or similar for
          marshaling exceptions. Added to new exception types that more
          verbosely catch the very circumstance of not finding a
          contract or an implementation (InterfaceDescriptionNotFound,
          CalleeInterfaceNotFound).

2007-08-07  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* www/admin/index.tcl: added some fine features
	to make the admin interface slightly more appealing, 
	completed implementation state display, register/unregister
	of implementations

	* tcl/xorb-broker-procs.tcl: minor change to make
	the (re-)init of binding state more elegant.

2007-08-06  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* www/admin/regression-test.tcl: Fixed for new separation
	of connection vs. invocation context. 

	* tcl/xorb-stub-procs.tcl: Added inline documentation for
          ProxyObject, ProxyClass, Object->glue/ad_glue.

	* tcl/xorb-package-procs.tcl: The role of packages has been
          pitched quite strongly, ProtocolPackage hosts some new
          shared functionality for protocol plug-in package types,
	  path resolution, generic dispatcher etc.

	* tcl/xorb-deployment-procs.tcl: Minor bug fix in
          isImplementation condition which was not aware of
	  the internal replacement of :: delimiters by "__".

	* tcl/xorb-context-procs.tcl: The request broker amends
          xotcl-core's connection context by an attribute 'httpMethod'
          (method would be conflicting with
          ::xotcl::Object->method). InvocationContext is now
          independent from ::xo::ConnectionContext

	* tcl/20-xorb-procs.tcl: Re-introduced separation of concern
          between connection contexts (as re-used from xotcl-core) and
          invocation contexts. this required a major rewrite. Added
          inline documentation for ServiceContract, Abstract,
          ServiceImplementation, Delegate, Method.

2007-08-02  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/xorb-deployment-procs.tcl: Fixed another bug introduced
          by the new internal instproc/proc naming scheme in xorb
          (xorb=*) prefixes with the deployment mechanism. Actual, the
          containment check did not work anymore, as the prefixes were
          not taken care of.

	* tcl/20-xorb-procs.tcl: Fixed two nasty bugs. First, the
          current protocol context (needed for sponsorship resolution
          of anythings) was not properly handled for the
          ReturnValueChecker. Second, resolving return value
          declaration (Abstract->returns) was not handled correctly by
          the ReturnValueChecker. Introduced a generic mechanism based
          on a nifty regex. This realises the following syntax for
          return value constraints on Abstracts:
	  1-) "xsString" resolves to "returnValue:xsString"
	  2-) "myLabel:xsString" remains "myLabel:xsString"
	  3-) "" (empty tcl string or returns not set) turns into
          "returnValue:void" 
	  4-) "soapStruct(::xosoap::demo::exampleStruct)" turns into
          "returnValue:soapStruct(::xosoap::demo::exampleStruct)"
	  5-) "myLabel:soapStruct(::xosoap::demo::exampleStruct)"
          remains unchanged
	  6-)
          "myLabel:myLabel:soapStruct(::xosoap::demo::exampleStruct)"
          (faulty!) turns into
          "myLabel:soapStruct(::xosoap::demo::exampleStruct)"
	  

2007-08-01  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>
	    
	* Updated manual: Added section on glue objects + graphics 

	* tcl/xorb-stub-procs.tcl: Added inline documentation for
	  ContextObject. Fix regarding indirector generation: Passing
	  an empty/ non-empty body argument to ad_proc/ad_instproc
	  will now decide upon whether both the argument list is
	  filtered (inner/outer record) and a indirector is created.

	* tcl/xorb-datatypes-procs.tcl: Changed the validation
	  semantics of ::xorb::datatypes::String which will now return
	  1/true by default. ::xosoap::xsd::XsString, on the contrary,
	  is now explicitly verified against a range of unicode
	  character codes.

2007-07-30  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* www/admin/regression-test.tcl: Added a collection of test
	  cases for the revised method/delegate notations, based upon
	  the method slot idiom.

	* tcl/xorb-datatypes-procs.tcl: Fixed the new sponsorship
	  mechansim across xorb. At some points, it is required to
	  provide the current protocol identifier to the casting
	  mechanism (::xorb::datatypes::Anything->as) or the typecode
	  resolver (::xorb::datatypes::AnyReader). This was now
	  completed and tested (the same goes for the protocol plug-ins).

	* tcl/20-xorb-procs.tcl: Fixed the improved Delegate/Method
	  notation (based upon a basic method slot mechansim) for
	  reflecting ad_(inst)proc and ad_(inst)forward in terms of
	  ad_* specific flags. They now allow for specifying
	  private_p, deprecated_p, warn_p and debug_p. More
	  importantly, Delegate/Method can now be specified on the
	  per-object level, i.e. an instance of ServiceImplementation
	  can now act as valid servant host (formerly, it was always
	  realised on the per-instance, class level). This is more in
	  line with the object-centeredness of XOTcl and realises the
	  per-object attribute as known from XOTcl's attribute
	  slots. It required some changes in the way, the lifecycle
	  manager deals with servant-hosting implementations (at the
	  object level). I added some in-depth test cases to the
	  regression test, according to these, all seems fine.
	  Another major completing step is the introduction of a new
	  xorb-specific type, ::xorb::datatypes::Void. Whenever a
	  contract specification object or rather its abstract slots
	  do not specify an explicit returns type constraint (returns
	  eq {}), we default to void. At the Tcl level, void is
	  semantically equivalent with an empty Tcl string as. At the
	  level of protocol plug-ins, however, expressing the intended
	  voidnesses makes a considerable difference in terms of
	  marshalling of the return value. 

2007-07-27  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/xorb-datatypes-procs.tcl: Introduced a sponsorship
	  infrastructure for Anythings. This is, in particular, useful
	  for specifying placheholderships across protocol
	  domains. The idea is to allow the re-use of contract
	  specifications across these protocol domains, so that a
	  contract once specified for local call abstractions can be
	  re-used as description for a SOAP-based calls. Any object of
	  type MetaPrimitive/MetaComposite can know be assigned as
	  sponsors to another of their kind, but residing in a
	  different protocol scope. Therefore, whenever an Abstract
	  contained arguments of type string
	  (::xorb::datatypes::String), invocations from the SOAP
	  protocol layer will revert to string's sponsor,
	  i.e. ::xosoap::xsd::XsString. Still needs some testing to
	  make sure it fulfills all requirements and I did not miss to
	  align some bits and pieces.

	* tcl/20-xorb-procs.tcl: ::xorb::Object is not featured as acs
	  object type anymore. Contract specifications now allow for
	  specifying a default typecode that is resolvable to a
	  Anything class. This allows to assume defaults (either
	  per-class -- through the attribute slot default -- or
	  per-object) when specifying contracts. This might be used to
	  short-cut the definition of argument lists of
	  ::xorb::Abstracts and it guarantees an overall fallback to
	  ::xorb::datatypes::String if no checkoption was provided at all.

2007-07-26  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* www/admin/index.tcl: A rough and crappy admin WUI know comes
	  with the request-broker. I is supposed to ressemble (in the
	  very near future) the functionality by acs-service-contract
	  admin panels. I distinguished between xorb-based and pure
	  acs-based contracts/ implementations, currently in terms of
	  a different set of actions (deletion).

	* tcl/20-xorb-procs.tcl: Finally, proceded and completed the
	  partial rework of the contract/implementation interface. It
	  is a major refinement that aims at realising two types of
	  method slots (in the CLOS sense of the word). They might
	  probably be a feature of XOTcl 1.6 release family, however,
	  in the context of xorb, they allow for declaring (a)
	  delegates (XOTcl: forwards) and (b) methods through object
	  facilities. Initially, we simply allowed for ::xorb::Method
	  in a proc/ instproc style of writing. We extended this to
	  Delegates and, furthermore, streamlined the identity of
	  ServiceContracts and Implementations as (a) ordinary classes
	  and (b) ordinary objects. (a) means that one can know
	  expect a proper instproc when using ::xorb::Method or a
	  forward when using ::xorb::Delegate on
	  Implementations. ServiceImplementations can therefore be
	  instantiated etc. (b) refers to the fact that we now allow
	  the per-object flag on Methods/Delegates,
	  i.e. ServiceImplementations can know provide/contain servant
	  code on the pure object level. This requires to refine the
	  ServantAdapter logic of xorb in the subsequent
	  step. However, this feature refinement reconnects xorb to
	  from where it started: XOTcl. Remains to be tested.
	  Some remarks on the realisation: Slots as such, especially
	  when interfereing or building-upon their basic
	  infrastructure, are tricky to handle in a
	  multi-interpreter/threaded environment with streamed
	  representations. This relates to the fact that they are in
	  fact re-initialised (re-call to the constructor) when
	  turning a stream back into an object. A proper mean to
	  distinguish between declaration + re-init time is the slots
	  method as provided by Class. Streams do not revert to it, so
	  it is convenient to use for the purpose of distinguishing
	  runtime contexts.

	* www/admin/index.tcl: Started realising the admin WUI for the
	  request broker, still heavy work in progress.

	* tcl/xorb-package-procs.tcl: Finally integrated xorb's
	  package facilities with those of xotcl-core. This allows for
	  seamless package initialisation practices in WUI and
	  background setup (filters, ...) as required by
	  xorb. Specialisation is provided for package inits in
	  non-connection contexts.

	* tcl/15-xorb-aux-procs.tcl: Added some query helpers for
	  object types to select subtrees, instances etc.

2007-07-12  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/20-xorb-procs.tcl: While polishing
	  the interface, introduced some namespace import fiddling to
	  allow for pretty-looking contract and implementation
	  declarations: It is know possible to leave out namespace
	  qualifiers when declaring Abstracts, Delegates and Methods.
	  As for Methods, I realised a basic allowance of
	  full-featured, instproc/proc like record declarations
	  (including dashes, checkoptions ...), even in an unescaped
	  manner (without protecting braces). One can now write
	  something like
	  [...]
	  -using {
		 Method myMethod {-arg1:required -arg2} {doc} {;}
	  }
	  [...]
	  There are three major reserved names regarding argument
	  for non-pos arguments: 'mixin', 'set', and 'array' are
	  interpreted by configure and therefore at the object level.
	  As for Delegates, the attribute formerly named 'proxies' is
	  know called 'for', which yields something like
	  [...]
	  -using {
		 Delegate myDelegate -for ::ns::myProc
	  }
	  [...]

2007-07-11  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* Initial commit of xorb manual tex source (see www/doc/manual).

	* tcl/xorb-stub-procs.tcl: Removed attribute slot declarations
	  concerning marshalled/ unmarshalled messages
	  from ContextObject and assigned them at the level of
	  xosoap. Revised the resolution order for glue objects by the
	  Requestor: 1- glue objects specified by ad_proc /
	  ad_instproc, 2- proxy object as glue object itself, 3-
	  glueobject instance variable or anything returned by a
	  method glueobject availabe at the level of the proxy object. 
	  Realised "proxy template" feature and distinct handling of
	  outer and inner record in __makeStubBody__. Renamed GObject
	  and GClass to ProxyObject and ProxyClass, respectively.

	* tcl/xorb-datatypes-procs.tcl: Added a new check option to
	  the Checkoption+Uplift mixin that maps 'glue' check options
	  to 'required'. This is used for the 'proxy template' feature
	  as introduced in 0.4.

2007-07-04  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/xorb-deployment-procs.tcl: Added a new aspect to the
	  lazy deployment part of
	  ::xorb::deployment::Checkable::Containment->check to handle
	  situations when an implementation is supposed to be checked
	  against a contract that has just happened to be queued for
	  deployment in the same start-up run!

	* tcl/xorb-datatypes-procs.tcl: Changed ::xorb::MetaAny to
	  ::xorb::MetaPrimitive, added a ::xorb::MetaComposite to
	  identify Typecodes and their anythings that declare
	  themselves to serve as composite structures. The latter is
	  used to remove the last nasty dependency (see
	  CheckOption+Uplift) to the soap protocol plug-in introduced
	  unreflectedly when realising the anything support as such.

	* tcl/xorb-callback-procs.tcl: Added a callback after-install,
	  tested for expected behaviour during
	  installation/de-installation. Fixed typo in boolean expression. 

	* tcl/xorb-adapters-procs.tcl: Fixed typo in if expression.

	* tcl/20-xorb-procs.tcl: Revised the logic for lazy deployment
	  of contracts and implementations. The after-init blocks now
	  take care of processing candidates of all existing
	  subclasses of ServiceContract and ServiceImplementation
	  (Adapters ...). We now store the
	  information of deployment candidates in two separate lists,
	  one containing the suggested names of the specified items,
	  one listing the object references. The former is used in the
	  revised conformance checking scheme of implementations upon
	  server start-up, especially for the case of implementing
	  contracts queued for deployment in the same run!
	  Put the slot-based type validator qname and resolve-to-qname
	  in place on ServiceContract->contract_name,
	  ServiceImplementation->impl_name and
	  ServiceImplementation->impl_contract_name aka implements. 
	  Fixed dropObjectType for contracts: As there is no
	  propagation of contract removals provided either by the ACS
	  SC db scheme, nor the AcsObject* Framework (simply, because
	  Operations and Message Types are not covered by it for now),
	  we need some extra, message type removing logic here. Tested.
	  Added an ::xorb::Invoker->resolve that is simply a hook for
	  protocol plug-ins to provide their own name/object id resolution.

	* tcl/15-xorb-aux-procs.tcl: Fixed
	  ::xorb::aux::AcsObjectType->dropObjectType to handle the
	  deletion of "abstract" object types, those that don't have
	  an attribute table and constructor/destructor.
	  As part of the revised naming/addressing scheme (object ids
	  as used by the protocol plugins and as resolved by the
	  Invoker to internal references), two type validators were
	  added to AcsAttribute: qname and resolve-to-qname. Both
	  verify that names of contracts and implementations do not
	  resolve to protected/ reserved namespaces (xotcl::*,
	  acs::*), the latter being used to provide backward
	  compatibility to legacy contracts and implementations that
	  do not map to tcl namespaces. resolve-to-qname does the some
	  plus resolving values handled by the slot object as
	  namespace which would do relative to the slot object (used
	  for implements of ServiceImplementation).
	  Added a helper method on ::xotcl::Class to expand the
	  subclass tree to a given class (getAllSubClasses).

	* sql/postgresql/...-{create|drop}.sql: Fixed and tested for
	  installation and deinstallation. Major parts are are now
	  handled by the AcsObject* Framework and have been removed
	  from these files. 

2007-07-02  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* Re-organised directory structure in www/, added serializer
	  patch for 0.4 which handles the observed issue of
	  re-evaluating variable traces and the streaming ordering
	  applied by the current version of xotcl serializer when
	  streaming slot objects to the blueprint. Note, however, that
	  a more generic solution to this issue is pending, for the
	  moment, the patch allows for running 0.4 and its new features.   

2007-06-28  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/20-xorb-procs.tcl: We introduce the new naming /
	  addressing scheme. Concept-wise, it is the ::xorb::Invoker
	  that acts as main naming/addressing/resolution
	  principal. The invoker is provided with a new method
	  "resolve" that currently implements a single resolution
	  strategy: As we currently only have plug-ins that employ URL
	  based identifiers, we provide for resolving URL components/
	  fragments to 

2007-06-27  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/xorb-deployment-procs.tcl: Revised and simplified the
	  contract retrieval for conformance checking of
	  implementations. Context awareness at this level is now
	  limited to whether the managing thread exists or not. A
	  indirection (for either inside or outside calls to
	  ::xorb::Skeleton->getContract) is now decided within the
	  Skeleton class. Moreover, the non-cached version of Skeleton
	  explicitly removes already initialised skeleton objects
	  residing in its namespace (this was necessary to avoid
	  unwanted recreation). 

	* tcl/20-xorb-procs.tcl: Fixed for the incremental deletion of
	  contracts and implementations. It is not a highly prominent
	  feature but occurred in a test setting. Incremental deletion
	  at the XOTcl layer refers to removing (destroying) a
	  Abstract or Delegate (Method) slot object from a contract or
	  implementation. However, an updating synchronisation in case
	  of contracts requires (for the initial deletion in the
	  update process) all slot objects to be present. By introducing
	  an uniform delete method on Abstracts and Delegates we avoid
	  this issue: In case of contracts, this simply marks slots
	  for destruction for a moment after the deletion of the
	  contract from the db. At the same time they are marked for
	  exclusion from the signature generation in order to set for
	  an update situation. In case of implementations, this work
	  around is not strictly needed as the db schema of
	  acs-service-contract enforces the cascading deletion of
	  Aliases / Delegates. Therefore, a delete simply delegates to
	  destroy.

	* tcl/xorb-datatypes-procs.tcl: Fixed the resolution of
	  Anything subtypes to fully qualified paths to be able to
	  distinguish more accurately between Anything classes based
	  upon the typecode. Started adding a set of xorb native
	  types, i.e. ::xorb::datatypes::String and
	  ::xorb::datatypes::Integer. The list has to be completed 
	  (following the entries in acs_sc_msg_types).

	* tcl/xorb-broker-procs.tcl: Completed another step through a
	  more sound lifecycling of contracts / implementations. on
	  each update on a contract, all previously bound impls are
	  checked for the ex-post conformance and the bindings are
	  reviewed int this respect.

	* tcl/20-xorb-procs.tcl: We introduced, as part of the
	  upcoming revised object reference / addressing scheme some
	  helpers that ascertain canonical reference generations for
	  xorb objects, i.e. service contracts and implementations,
	  for the internal usage (see "canonicalName" as method on
	  ::xorb::Object, ::xorb::ServiceContract,
	  ::xorb::ServiceImplementation). They simply take care of
	  mapping fully qualified tcl references (incl. namespaces)
	  into a underscored notation. 
	  Deletion of service contracts is now fixed for explicitly
	  removing the operations to the contract. 
	  Updated the skeleton generation to behave differently inside
	  or outside the managing thread
	  (::xorb::Skeleton->getContract,
	  ::xorb::Skeleton->getImplementation).
	  Cleaned up the injection of CheckOption+Uplift, i.e. the
	  translation back and forth to Anythings of arguments and
	  return values through the checkoption mechanism: It is now
	  more closely tailored to calling scope of XORB core
	  functions and is cleared when the XORB scope is left
	  (i.e. the actual servant code is called). This avoids to
	  mix-in phantom variables in servant call scopes etc. 
	  The caching of skeletons is now restricted, by default, to
	  generation requests through ::xorb::Invoker, this allows to
	  use the Skeleton generator in cases where caching should be
	  avoided (generating = caching unbound implementations etc.).

	* tcl/15-xorb-aux-procs.tcl: The AcsObject* framework has been
	  partly rewritten. Type constructors are know created for
	  each object type "on foot", e.g. we provide for a stored
	  procedure taking care of populating all supertypes
	  etc. instead of referring to supertype's constructors. 
	  ::xorb::aux::AcsObject now takes care of resolving the closest
	  object type class in reach of a given type instance (see
	  ::xorb::aux::AcsObject->getType). This allows for subtyping class
	  objects of type AcsObjectType without necessarily declaring
	  these subtypes AcsObjectType themselves. 
	  ::xorb::aux::AcsAttribute know allows for value checks on
	  object-scoped variables ('instance variables') through the
	  slot mechanism. This will be part in the revised object id /
	  addressing scheme in 0.4 (see
	  ::xorb::aux::AcsAttribute->xorb=quname). 

	* www/doc/regression-test.tcl: Fixed the request broker FOR
	  most (except for 7) and, most importantly, all critical of
	  the regression tests that come with the request broker. The
	  now reflect the newly introduced features and fixes
	  introduced in version 0.4.

2007-06-20  Stefan Sobernig  <stefan.sobernig@wu-wien.ac.at>

	* tcl/xorb-callback-procs.tcl: Added a before-uninstall
	  callback that unregisters acs_object_types defined for the
	  request broker.

	* tcl/xorb-deployment-procs.tcl: Added a more robust/ generic
	  deployment variant for contracts and implementations. Now,
	  both contracts and implementations have to be explicitly
	  deployed (calling 'deploy' on their specification
	  objects). Behind the scene, it will, depending on the
	  runtime context (intialisation, running instance) either be
	  lazily or instantly synchronised etc. This changes allows to
	  inject contracts and implementations from different
	  contexts, i.e. the developer shell or a web-ui script.

	* tcl/20-xorb-procs.tcl: Started rewriting the the
	  request-broker kernel to make use of the generic OpenACS
	  Object System support that comes with
	  0.4. ::xorb::ServiceContract and
	  ::xorb::ServiceImplementation are partly completed.

	* sql/postgresql/xotcl-request-broker-create.sql: There is a
	  new constructor procedure and extension table for elements
	  to message types in service contracts (constructor:
	  xorb_msg_type_element__new, table:
	  xorb_msg_type_elements_ext). They allow for extending the
	  information model of message type elements independently
	  from the basic message type elements
	  (e.g. element_constraints). As message type elements are not
	  designed as acs_objects, it is somehow hacky. We plan to TIP
	  the amendment of acs-service-contract schema in this manner.

	* sql/postgresql/acs-object-model-function-args.sql: Adding
	  generic upgrade script to register a set of plpgsql stored
	  procedures related to the ACS Object System with with
	  xotcl-core's DB abstraction layer (::xo::db::sql::*). This
	  has, at this point in time, not committed to any version in
	  the OpenACS code base. The upgrade therefore applies to all
	  supported OpenACS versions.

	* sql/postgresql/acs-service-contract-function-args.sql:
	  Adding generic upgrade script to register a set of pgplsql
	  stored procedures with xotcl-core's DB abstraction layer
	  (::xo::db::sql::*). In acs-service-contract => 5.4.0d1, they
	  are integrated with the released package.

	* tcl/xorb-callback-procs.tcl: Added initial callback support
	  for XORB. It will handle upgrade and install refinements
	  starting with release version 0.4.

	* tcl/15-xorb-aux-procs.tcl: Completed the basic set of a XORB
	  framework support for the OpenACS Object System:
	  ::xorb::AcsObjectType and ::xorb::AcsAttribute allows for
	  the management of acs_object_types, ::xorb::AcsObject is the
	  base class for XOTcl representations of acs_objects. The
	  facilities are integrated with the xotcl-core DB abstraction
	  layer (::xo::db::sql::*).

	* ChangeLog: Added this ChangeLog to the repository.
